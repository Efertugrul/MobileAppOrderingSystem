@page "/setorder"
@using Models
@using Helpers

<div class="top-row ps-3 navbar navbar-dark" style="margin-top:20px">
    <div class="container-fluid">
        <a class="navbar-brand" style="color:#6E0AEE" href="">RIVA Terminal&emsp;-&emsp;<strong>Set Order</strong></a>
        <button title="Navigation menu" class="navbar-toggler" style="background-color:#6E0AEE" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-row">
        <table>
            <th class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </th>
            <th class="nav-item px-3">
                <NavLink class="nav-link" href="orders">
                    <span class="oi oi-basket" aria-hidden="true"></span> Online Orders
                </NavLink>
            </th>
            <th class="nav-item px-3">
                <NavLink class="nav-link" href="locations">
                    <span class="oi oi-basket" aria-hidden="true"></span> Locations
                </NavLink>
            </th>
            <th class="nav-item px-3">
                <NavLink class="nav-link" href="tabledrag">
                    <span class="oi oi-basket" aria-hidden="true"></span> Table Drag (new)
                </NavLink>
            </th>
        </table>
    </nav>
</div>

@if (productTypeRoot == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="setShowModalTrue" class="btn btn-primary" style="margin-top:20px">New Order</button>
    <p style="margin:4px"></p>
    @if (showModal)
    {
        <div class="modal" tabindex="-1" role="dialog" style="display:block" id="taskModal">
            <div class="modal-dialog shadow-lg bg-white rounded" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add new order</h5>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="productTypeModel">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group row">
                                <input @onchange="(e => CompareIds(e))" @onclick="Reset" autoComplete="on" list="productTypeRoot.product_types" placeholder="Categories"/>
                                <datalist id="productTypeRoot.product_types">
				                    @foreach (var item in productTypeRoot.product_types)
				                    {
                                        <option>@item.title</option>
				                    }
			                    </datalist>
                                @if (showProductsBox == true)
                                {
                                    var i = 0;
                                    <input @onchange="(e => CompareNames(e))" autoComplete="on" list="productRoot.products" placeholder="Products"/>
                                    <datalist id="productRoot.products">
				                        @foreach (var item in productRoot.products)
				                        {
                                            @if (item.type_id == currTypeId)
                                            {
                                                i++;
                                                <option>@i- @item.name</option>
                                            }
				                        }
			                        </datalist>
                               }
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" @onclick="(e => Submit(productModel))">Submit</button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
    @if(showTable == true && productModelList != null)
    {
        int totalPrice = 0;
        int index = 0;
        <table align="right">
            <thead style="color:white">
                <tr style="border-bottom:solid">
                    <th>Product</th>
                    <th>Category</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody style="color:white">
                @foreach(var item in productModelList)
                {
                    productTypeModel = productTypeModelList.ElementAt(index);
                    <tr style="border-bottom:1px solid black">
                        <td>@item.name</td>
                        <td>@productTypeModel.title</td>
                        <td>$@item.price</td>
                    </tr>
                    totalPrice += item.price;
                    index++;
                }
            </tbody>
            <tr style="color:white">
                <th>Total Price: $@totalPrice</th>
            </tr>
        </table>
    }
}

<style>
    body{
        background-color:#181818;
    }

    input{
        margin-bottom:10px;
        border-radius:7px;
        border:solid;
        border-block-color:#6E0AEE;
        height:50px;
    }
    th{
       padding-right:25px;
       padding-left:25px;
    }
    td{
        padding-right:25px;
        padding-left:25px;
        padding-top:5px;
    }
</style>

@code {
    [Inject]
    private HttpClient Http { get; set; }
    private ProductTypeRoot? productTypeRoot;
    private ProductRoot? productRoot;
    private ProductTypeModel productTypeModel = new ProductTypeModel();
    private ProductModel productModel = new ProductModel();
    List<ProductModel> productModelList = new List<ProductModel>();
    List<ProductTypeModel> productTypeModelList = new List<ProductTypeModel>();
    private String imageUrl = "http://db.zenexserver.com/uploads/";
    private int currTypeId = 0;
    bool showModal = false;
    bool showProductsBox = false;
    bool showTable = false;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await getProductTypeData();
        await getProductData();
    }

    private void setShowModalTrue() => showModal = true;
    private void setShowModalFalse() => showModal = false;

    private void setShowProductsBoxTrue() => showProductsBox = true;
    private void setShowProductsBoxFalse() => showProductsBox = false;

    private void setShowTableTrue() => showTable = true;
    private void setShowTableFalse() => showTable = false;

    public async Task getProductTypeData()
    {
        productTypeRoot = await Http.GetFromJsonAsync<ProductTypeRoot>("http://db.zenexserver.com/api/v1/product_types/midpoint");
    }

    public async Task getProductData()
    {
        productRoot = await Http.GetFromJsonAsync<ProductRoot>("http://db.zenexserver.com/api/v1/products/midpoint");
    }

    private void Submit(ProductModel productObj)
    {
        if(productObj != null && productTypeRoot != null)
        {
            productModelList.Add(productObj);
            foreach(var item in productTypeRoot.product_types)
            {
                if (item.id == productObj.type_id)
                {
                    productTypeModelList.Add(item);
                }
            }
        }
        setShowTableTrue();
    }

    private void Cancel()
    {
        setShowModalFalse();
        setShowTableFalse();
    }

    private void CompareIds(ChangeEventArgs e)
    {
        if (e.Value != null && productTypeRoot != null && productRoot != null)
        {
            foreach(var productType in productTypeRoot.product_types)
            {
                if (productType.title.Equals(e.Value))
                {
                    currTypeId = productType.id;
                    setShowProductsBoxTrue();
                }
            }
        }
    }

    private void CompareNames(ChangeEventArgs e)
    {
        if (e.Value != null && productRoot != null)
        {
            foreach(var item in productRoot.products)
            {
                string currProductName = e.Value.ToString();
                if (currProductName.Contains(item.name))
                {
                    productModel = item;
                }
            }
        }
    }

    private void Reset()
    {
        currTypeId = 0;
        setShowProductsBoxFalse();
    }
}

