@using Models

<div class="job-status" style="width:190px">
    <h3 style="color:white">Column @ListStatus (@Jobs.Count())</h3>

    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var job in Jobs)
        {
            <Job JobModel="job" />
        }

    </ul>
</div>

@code {

    [CascadingParameter] JobsContainer Container { get; set; }
    [Parameter] public string ListStatus { get; set; }

    List<JobModel> Jobs = new List<JobModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Jobs.Clear();
        Jobs.AddRange(Container.Jobs.Where(x => x.idmumber == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.idmumber) return;
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        await Container.UpdateJobAsync(ListStatus);
    }
}
