@inherits Microsoft.AspNetCore.Components.Forms.InputText
@using System.ComponentModel.DataAnnotations
@using System.Reflection

<div class="form-group">
    <label for="@id.ToString()">@LabelText</label>
    <input id="@id.ToString()" type="@Type" class="form-control @CssClass"
           @attributes="@AdditionalAttributes"
           @onfocus="@(()=>ShowError=true)"
           placeholder="@PlaceHolder"
           @bind="@CurrentValue" />
    @if (!string.IsNullOrWhiteSpace(Desccription))
    {
        <small class="form-text text-muted">@Desccription</small>
    }
    @if (ShowError)
    {
        @foreach (var message in EditContext.GetValidationMessages(FieldIdentifier))
        {
            <div class="validation-message">@message</div>
        }
    }
    @if (CssClass.Contains("modified") && !EditContext.GetValidationMessages(FieldIdentifier).Any()
              && !string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="valid-feedback">@string.Format(SuccessMessage, this.Value)</div>
    }
</div>

@code{
    Guid id = Guid.NewGuid();
    [Parameter] public bool ShowError { get; set; } = false;
    [Parameter] public string LabelText { get; set; } = "";
    [Parameter] public string PlaceHolder { get; set; } = "";
    [Parameter] public string Desccription { get; set; } = "";
    [Parameter] public string SuccessMessage { get; set; } = "";
    [Parameter] public string Type { get; set; } = "";

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        try
        {
            var displayAttribute = this.FieldIdentifier.Model.GetType()
                        .GetProperty(this.FieldIdentifier.FieldName)
                        .GetCustomAttributes<DisplayAttribute>();
            if (displayAttribute != null)
            {
                var displayName = displayAttribute.FirstOrDefault().Name;
                if (!string.IsNullOrEmpty(displayName) && string.IsNullOrEmpty(LabelText))
                {
                    LabelText = displayName;
                }
                var placeHolder = displayAttribute.FirstOrDefault().Prompt;
                if (!string.IsNullOrEmpty(placeHolder) && string.IsNullOrEmpty(PlaceHolder))
                {
                    PlaceHolder = placeHolder;
                }
                var description = displayAttribute.FirstOrDefault().Description;
                if (!string.IsNullOrEmpty(description) && string.IsNullOrEmpty(Desccription))
                {
                    Desccription = description;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        return base.OnParametersSetAsync();
    }
}